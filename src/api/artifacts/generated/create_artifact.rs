// This file is generated by rust-protobuf 2.8.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `src/api/artifacts/create_artifact.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_2;

#[derive(PartialEq,Clone,Default)]
pub struct CreateArtifactRequest {
    // message fields
    pub project_id: ::std::string::String,
    pub run_id: ::protobuf::SingularPtrField<super::run_id::RunId>,
    pub artifact_id: ::protobuf::SingularPtrField<super::artifact::ArtifactId>,
    // message oneof groups
    pub data: ::std::option::Option<CreateArtifactRequest_oneof_data>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateArtifactRequest {
    fn default() -> &'a CreateArtifactRequest {
        <CreateArtifactRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum CreateArtifactRequest_oneof_data {
    artifact_data(super::artifact::ArtifactData),
    artifact_update(super::artifact::ArtifactUpdate),
}

impl CreateArtifactRequest {
    pub fn new() -> CreateArtifactRequest {
        ::std::default::Default::default()
    }

    // string project_id = 3;


    pub fn get_project_id(&self) -> &str {
        &self.project_id
    }
    pub fn clear_project_id(&mut self) {
        self.project_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_project_id(&mut self, v: ::std::string::String) {
        self.project_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_project_id(&mut self) -> &mut ::std::string::String {
        &mut self.project_id
    }

    // Take field
    pub fn take_project_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.project_id, ::std::string::String::new())
    }

    // .observation_tools.proto.RunId run_id = 4;


    pub fn get_run_id(&self) -> &super::run_id::RunId {
        self.run_id.as_ref().unwrap_or_else(|| super::run_id::RunId::default_instance())
    }
    pub fn clear_run_id(&mut self) {
        self.run_id.clear();
    }

    pub fn has_run_id(&self) -> bool {
        self.run_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_run_id(&mut self, v: super::run_id::RunId) {
        self.run_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_run_id(&mut self) -> &mut super::run_id::RunId {
        if self.run_id.is_none() {
            self.run_id.set_default();
        }
        self.run_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_run_id(&mut self) -> super::run_id::RunId {
        self.run_id.take().unwrap_or_else(|| super::run_id::RunId::new())
    }

    // .observation_tools.proto.ArtifactId artifact_id = 5;


    pub fn get_artifact_id(&self) -> &super::artifact::ArtifactId {
        self.artifact_id.as_ref().unwrap_or_else(|| super::artifact::ArtifactId::default_instance())
    }
    pub fn clear_artifact_id(&mut self) {
        self.artifact_id.clear();
    }

    pub fn has_artifact_id(&self) -> bool {
        self.artifact_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_artifact_id(&mut self, v: super::artifact::ArtifactId) {
        self.artifact_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_artifact_id(&mut self) -> &mut super::artifact::ArtifactId {
        if self.artifact_id.is_none() {
            self.artifact_id.set_default();
        }
        self.artifact_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_artifact_id(&mut self) -> super::artifact::ArtifactId {
        self.artifact_id.take().unwrap_or_else(|| super::artifact::ArtifactId::new())
    }

    // .observation_tools.proto.ArtifactData artifact_data = 2;


    pub fn get_artifact_data(&self) -> &super::artifact::ArtifactData {
        match self.data {
            ::std::option::Option::Some(CreateArtifactRequest_oneof_data::artifact_data(ref v)) => v,
            _ => super::artifact::ArtifactData::default_instance(),
        }
    }
    pub fn clear_artifact_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_artifact_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(CreateArtifactRequest_oneof_data::artifact_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_artifact_data(&mut self, v: super::artifact::ArtifactData) {
        self.data = ::std::option::Option::Some(CreateArtifactRequest_oneof_data::artifact_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_artifact_data(&mut self) -> &mut super::artifact::ArtifactData {
        if let ::std::option::Option::Some(CreateArtifactRequest_oneof_data::artifact_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(CreateArtifactRequest_oneof_data::artifact_data(super::artifact::ArtifactData::new()));
        }
        match self.data {
            ::std::option::Option::Some(CreateArtifactRequest_oneof_data::artifact_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_artifact_data(&mut self) -> super::artifact::ArtifactData {
        if self.has_artifact_data() {
            match self.data.take() {
                ::std::option::Option::Some(CreateArtifactRequest_oneof_data::artifact_data(v)) => v,
                _ => panic!(),
            }
        } else {
            super::artifact::ArtifactData::new()
        }
    }

    // .observation_tools.proto.ArtifactUpdate artifact_update = 6;


    pub fn get_artifact_update(&self) -> &super::artifact::ArtifactUpdate {
        match self.data {
            ::std::option::Option::Some(CreateArtifactRequest_oneof_data::artifact_update(ref v)) => v,
            _ => super::artifact::ArtifactUpdate::default_instance(),
        }
    }
    pub fn clear_artifact_update(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_artifact_update(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(CreateArtifactRequest_oneof_data::artifact_update(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_artifact_update(&mut self, v: super::artifact::ArtifactUpdate) {
        self.data = ::std::option::Option::Some(CreateArtifactRequest_oneof_data::artifact_update(v))
    }

    // Mutable pointer to the field.
    pub fn mut_artifact_update(&mut self) -> &mut super::artifact::ArtifactUpdate {
        if let ::std::option::Option::Some(CreateArtifactRequest_oneof_data::artifact_update(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(CreateArtifactRequest_oneof_data::artifact_update(super::artifact::ArtifactUpdate::new()));
        }
        match self.data {
            ::std::option::Option::Some(CreateArtifactRequest_oneof_data::artifact_update(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_artifact_update(&mut self) -> super::artifact::ArtifactUpdate {
        if self.has_artifact_update() {
            match self.data.take() {
                ::std::option::Option::Some(CreateArtifactRequest_oneof_data::artifact_update(v)) => v,
                _ => panic!(),
            }
        } else {
            super::artifact::ArtifactUpdate::new()
        }
    }
}

impl ::protobuf::Message for CreateArtifactRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.run_id {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.artifact_id {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(CreateArtifactRequest_oneof_data::artifact_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CreateArtifactRequest_oneof_data::artifact_update(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.project_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.run_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.artifact_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(CreateArtifactRequest_oneof_data::artifact_data(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(CreateArtifactRequest_oneof_data::artifact_update(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.project_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.project_id);
        }
        if let Some(ref v) = self.run_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.artifact_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &CreateArtifactRequest_oneof_data::artifact_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CreateArtifactRequest_oneof_data::artifact_update(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.project_id.is_empty() {
            os.write_string(3, &self.project_id)?;
        }
        if let Some(ref v) = self.run_id.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.artifact_id.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &CreateArtifactRequest_oneof_data::artifact_data(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CreateArtifactRequest_oneof_data::artifact_update(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateArtifactRequest {
        CreateArtifactRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "project_id",
                    |m: &CreateArtifactRequest| { &m.project_id },
                    |m: &mut CreateArtifactRequest| { &mut m.project_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::run_id::RunId>>(
                    "run_id",
                    |m: &CreateArtifactRequest| { &m.run_id },
                    |m: &mut CreateArtifactRequest| { &mut m.run_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::artifact::ArtifactId>>(
                    "artifact_id",
                    |m: &CreateArtifactRequest| { &m.artifact_id },
                    |m: &mut CreateArtifactRequest| { &mut m.artifact_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::artifact::ArtifactData>(
                    "artifact_data",
                    CreateArtifactRequest::has_artifact_data,
                    CreateArtifactRequest::get_artifact_data,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::artifact::ArtifactUpdate>(
                    "artifact_update",
                    CreateArtifactRequest::has_artifact_update,
                    CreateArtifactRequest::get_artifact_update,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateArtifactRequest>(
                    "CreateArtifactRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateArtifactRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateArtifactRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateArtifactRequest,
        };
        unsafe {
            instance.get(CreateArtifactRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateArtifactRequest {
    fn clear(&mut self) {
        self.project_id.clear();
        self.run_id.clear();
        self.artifact_id.clear();
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateArtifactRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateArtifactRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateArtifactResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateArtifactResponse {
    fn default() -> &'a CreateArtifactResponse {
        <CreateArtifactResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateArtifactResponse {
    pub fn new() -> CreateArtifactResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CreateArtifactResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateArtifactResponse {
        CreateArtifactResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<CreateArtifactResponse>(
                    "CreateArtifactResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateArtifactResponse {
        static mut instance: ::protobuf::lazy::Lazy<CreateArtifactResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateArtifactResponse,
        };
        unsafe {
            instance.get(CreateArtifactResponse::new)
        }
    }
}

impl ::protobuf::Clear for CreateArtifactResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateArtifactResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateArtifactResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'src/api/artifacts/create_artifact.proto\x12\x17observation_tools.prot\
    o\x1a\x20src/api/artifacts/artifact.proto\x1a\x1esrc/api/artifacts/run_i\
    d.proto\"\xe3\x02\n\x15CreateArtifactRequest\x12\x1d\n\nproject_id\x18\
    \x03\x20\x01(\tR\tprojectId\x125\n\x06run_id\x18\x04\x20\x01(\x0b2\x1e.o\
    bservation_tools.proto.RunIdR\x05runId\x12D\n\x0bartifact_id\x18\x05\x20\
    \x01(\x0b2#.observation_tools.proto.ArtifactIdR\nartifactId\x12L\n\rarti\
    fact_data\x18\x02\x20\x01(\x0b2%.observation_tools.proto.ArtifactDataH\0\
    R\x0cartifactData\x12R\n\x0fartifact_update\x18\x06\x20\x01(\x0b2'.obser\
    vation_tools.proto.ArtifactUpdateH\0R\x0eartifactUpdateB\x06\n\x04dataJ\
    \x04\x08\x01\x10\x02\"\x18\n\x16CreateArtifactResponseB\x1b\n\x17tools.o\
    bservation.protoP\x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
