// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `src/api/artifacts/static_source_data_manifest.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:observation_tools.proto.StaticSourceDataManifest)
pub struct StaticSourceDataManifest {
    // message fields
    // @@protoc_insertion_point(field:observation_tools.proto.StaticSourceDataManifest.entries)
    pub entries: ::std::vec::Vec<StaticSourceDataManifestEntry>,
    // special fields
    // @@protoc_insertion_point(special_field:observation_tools.proto.StaticSourceDataManifest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StaticSourceDataManifest {
    fn default() -> &'a StaticSourceDataManifest {
        <StaticSourceDataManifest as ::protobuf::Message>::default_instance()
    }
}

impl StaticSourceDataManifest {
    pub fn new() -> StaticSourceDataManifest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entries",
            |m: &StaticSourceDataManifest| { &m.entries },
            |m: &mut StaticSourceDataManifest| { &mut m.entries },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StaticSourceDataManifest>(
            "StaticSourceDataManifest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StaticSourceDataManifest {
    const NAME: &'static str = "StaticSourceDataManifest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.entries.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.entries {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StaticSourceDataManifest {
        StaticSourceDataManifest::new()
    }

    fn clear(&mut self) {
        self.entries.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StaticSourceDataManifest {
        static instance: StaticSourceDataManifest = StaticSourceDataManifest {
            entries: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StaticSourceDataManifest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StaticSourceDataManifest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StaticSourceDataManifest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StaticSourceDataManifest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:observation_tools.proto.StaticSourceDataManifestEntry)
pub struct StaticSourceDataManifestEntry {
    // message fields
    // @@protoc_insertion_point(field:observation_tools.proto.StaticSourceDataManifestEntry.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:observation_tools.proto.StaticSourceDataManifestEntry.source)
    pub source: ::protobuf::MessageField<StaticSourceDataSourceReference>,
    // @@protoc_insertion_point(field:observation_tools.proto.StaticSourceDataManifestEntry.versions)
    pub versions: ::std::vec::Vec<StaticSourceDataVersionEntry>,
    // special fields
    // @@protoc_insertion_point(special_field:observation_tools.proto.StaticSourceDataManifestEntry.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StaticSourceDataManifestEntry {
    fn default() -> &'a StaticSourceDataManifestEntry {
        <StaticSourceDataManifestEntry as ::protobuf::Message>::default_instance()
    }
}

impl StaticSourceDataManifestEntry {
    pub fn new() -> StaticSourceDataManifestEntry {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &StaticSourceDataManifestEntry| { &m.id },
            |m: &mut StaticSourceDataManifestEntry| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StaticSourceDataSourceReference>(
            "source",
            |m: &StaticSourceDataManifestEntry| { &m.source },
            |m: &mut StaticSourceDataManifestEntry| { &mut m.source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "versions",
            |m: &StaticSourceDataManifestEntry| { &m.versions },
            |m: &mut StaticSourceDataManifestEntry| { &mut m.versions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StaticSourceDataManifestEntry>(
            "StaticSourceDataManifestEntry",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StaticSourceDataManifestEntry {
    const NAME: &'static str = "StaticSourceDataManifestEntry";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                26 => {
                    self.id = is.read_string()?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.source)?;
                },
                18 => {
                    self.versions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.id);
        }
        if let Some(v) = self.source.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.versions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(3, &self.id)?;
        }
        if let Some(v) = self.source.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.versions {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StaticSourceDataManifestEntry {
        StaticSourceDataManifestEntry::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.source.clear();
        self.versions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StaticSourceDataManifestEntry {
        static instance: StaticSourceDataManifestEntry = StaticSourceDataManifestEntry {
            id: ::std::string::String::new(),
            source: ::protobuf::MessageField::none(),
            versions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StaticSourceDataManifestEntry {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StaticSourceDataManifestEntry").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StaticSourceDataManifestEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StaticSourceDataManifestEntry {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:observation_tools.proto.StaticSourceDataManifestEntryId)
pub struct StaticSourceDataManifestEntryId {
    // message fields
    // @@protoc_insertion_point(field:observation_tools.proto.StaticSourceDataManifestEntryId.uuid)
    pub uuid: ::protobuf::MessageField<super::uuid::Uuid>,
    // special fields
    // @@protoc_insertion_point(special_field:observation_tools.proto.StaticSourceDataManifestEntryId.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StaticSourceDataManifestEntryId {
    fn default() -> &'a StaticSourceDataManifestEntryId {
        <StaticSourceDataManifestEntryId as ::protobuf::Message>::default_instance()
    }
}

impl StaticSourceDataManifestEntryId {
    pub fn new() -> StaticSourceDataManifestEntryId {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::uuid::Uuid>(
            "uuid",
            |m: &StaticSourceDataManifestEntryId| { &m.uuid },
            |m: &mut StaticSourceDataManifestEntryId| { &mut m.uuid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StaticSourceDataManifestEntryId>(
            "StaticSourceDataManifestEntryId",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StaticSourceDataManifestEntryId {
    const NAME: &'static str = "StaticSourceDataManifestEntryId";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.uuid)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.uuid.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.uuid.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StaticSourceDataManifestEntryId {
        StaticSourceDataManifestEntryId::new()
    }

    fn clear(&mut self) {
        self.uuid.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StaticSourceDataManifestEntryId {
        static instance: StaticSourceDataManifestEntryId = StaticSourceDataManifestEntryId {
            uuid: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StaticSourceDataManifestEntryId {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StaticSourceDataManifestEntryId").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StaticSourceDataManifestEntryId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StaticSourceDataManifestEntryId {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:observation_tools.proto.StaticSourceDataSourceReference)
pub struct StaticSourceDataSourceReference {
    // message fields
    // @@protoc_insertion_point(field:observation_tools.proto.StaticSourceDataSourceReference.file_name)
    pub file_name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:observation_tools.proto.StaticSourceDataSourceReference.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StaticSourceDataSourceReference {
    fn default() -> &'a StaticSourceDataSourceReference {
        <StaticSourceDataSourceReference as ::protobuf::Message>::default_instance()
    }
}

impl StaticSourceDataSourceReference {
    pub fn new() -> StaticSourceDataSourceReference {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "file_name",
            |m: &StaticSourceDataSourceReference| { &m.file_name },
            |m: &mut StaticSourceDataSourceReference| { &mut m.file_name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StaticSourceDataSourceReference>(
            "StaticSourceDataSourceReference",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StaticSourceDataSourceReference {
    const NAME: &'static str = "StaticSourceDataSourceReference";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.file_name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.file_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.file_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.file_name.is_empty() {
            os.write_string(1, &self.file_name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StaticSourceDataSourceReference {
        StaticSourceDataSourceReference::new()
    }

    fn clear(&mut self) {
        self.file_name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StaticSourceDataSourceReference {
        static instance: StaticSourceDataSourceReference = StaticSourceDataSourceReference {
            file_name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StaticSourceDataSourceReference {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StaticSourceDataSourceReference").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StaticSourceDataSourceReference {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StaticSourceDataSourceReference {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:observation_tools.proto.StaticSourceDataVersionEntry)
pub struct StaticSourceDataVersionEntry {
    // message fields
    // @@protoc_insertion_point(field:observation_tools.proto.StaticSourceDataVersionEntry.source_data_id)
    pub source_data_id: ::std::string::String,
    // @@protoc_insertion_point(field:observation_tools.proto.StaticSourceDataVersionEntry.hash)
    pub hash: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:observation_tools.proto.StaticSourceDataVersionEntry.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StaticSourceDataVersionEntry {
    fn default() -> &'a StaticSourceDataVersionEntry {
        <StaticSourceDataVersionEntry as ::protobuf::Message>::default_instance()
    }
}

impl StaticSourceDataVersionEntry {
    pub fn new() -> StaticSourceDataVersionEntry {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source_data_id",
            |m: &StaticSourceDataVersionEntry| { &m.source_data_id },
            |m: &mut StaticSourceDataVersionEntry| { &mut m.source_data_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &StaticSourceDataVersionEntry| { &m.hash },
            |m: &mut StaticSourceDataVersionEntry| { &mut m.hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StaticSourceDataVersionEntry>(
            "StaticSourceDataVersionEntry",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StaticSourceDataVersionEntry {
    const NAME: &'static str = "StaticSourceDataVersionEntry";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_data_id = is.read_string()?;
                },
                18 => {
                    self.hash = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.source_data_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.source_data_id);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.source_data_id.is_empty() {
            os.write_string(1, &self.source_data_id)?;
        }
        if !self.hash.is_empty() {
            os.write_string(2, &self.hash)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StaticSourceDataVersionEntry {
        StaticSourceDataVersionEntry::new()
    }

    fn clear(&mut self) {
        self.source_data_id.clear();
        self.hash.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StaticSourceDataVersionEntry {
        static instance: StaticSourceDataVersionEntry = StaticSourceDataVersionEntry {
            source_data_id: ::std::string::String::new(),
            hash: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StaticSourceDataVersionEntry {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StaticSourceDataVersionEntry").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StaticSourceDataVersionEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StaticSourceDataVersionEntry {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n3src/api/artifacts/static_source_data_manifest.proto\x12\x17observatio\
    n_tools.proto\x1a\x1csrc/api/artifacts/uuid.proto\"l\n\x18StaticSourceDa\
    taManifest\x12P\n\x07entries\x18\x01\x20\x03(\x0b26.observation_tools.pr\
    oto.StaticSourceDataManifestEntryR\x07entries\"\xd4\x01\n\x1dStaticSourc\
    eDataManifestEntry\x12\x0e\n\x02id\x18\x03\x20\x01(\tR\x02id\x12P\n\x06s\
    ource\x18\x01\x20\x01(\x0b28.observation_tools.proto.StaticSourceDataSou\
    rceReferenceR\x06source\x12Q\n\x08versions\x18\x02\x20\x03(\x0b25.observ\
    ation_tools.proto.StaticSourceDataVersionEntryR\x08versions\"T\n\x1fStat\
    icSourceDataManifestEntryId\x121\n\x04uuid\x18\x01\x20\x01(\x0b2\x1d.obs\
    ervation_tools.proto.UuidR\x04uuid\">\n\x1fStaticSourceDataSourceReferen\
    ce\x12\x1b\n\tfile_name\x18\x01\x20\x01(\tR\x08fileName\"X\n\x1cStaticSo\
    urceDataVersionEntry\x12$\n\x0esource_data_id\x18\x01\x20\x01(\tR\x0csou\
    rceDataId\x12\x12\n\x04hash\x18\x02\x20\x01(\tR\x04hashB\x1b\n\x17tools.\
    observation.protoP\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::uuid::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(StaticSourceDataManifest::generated_message_descriptor_data());
            messages.push(StaticSourceDataManifestEntry::generated_message_descriptor_data());
            messages.push(StaticSourceDataManifestEntryId::generated_message_descriptor_data());
            messages.push(StaticSourceDataSourceReference::generated_message_descriptor_data());
            messages.push(StaticSourceDataVersionEntry::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
