// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `src/proto/api_context.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:observation_tools.proto.ArtifactGroupUploaderData)
pub struct ArtifactGroupUploaderData {
    // message fields
    // @@protoc_insertion_point(field:observation_tools.proto.ArtifactGroupUploaderData.project_id)
    pub project_id: ::protobuf::MessageField<super::project_id::ProjectId>,
    // @@protoc_insertion_point(field:observation_tools.proto.ArtifactGroupUploaderData.run_id)
    pub run_id: ::protobuf::MessageField<super::run_id::RunId>,
    // @@protoc_insertion_point(field:observation_tools.proto.ArtifactGroupUploaderData.id)
    pub id: ::protobuf::MessageField<super::artifact::ArtifactId>,
    // @@protoc_insertion_point(field:observation_tools.proto.ArtifactGroupUploaderData.ancestor_group_ids)
    pub ancestor_group_ids: ::std::vec::Vec<super::artifact::ArtifactId>,
    // special fields
    // @@protoc_insertion_point(special_field:observation_tools.proto.ArtifactGroupUploaderData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ArtifactGroupUploaderData {
    fn default() -> &'a ArtifactGroupUploaderData {
        <ArtifactGroupUploaderData as ::protobuf::Message>::default_instance()
    }
}

impl ArtifactGroupUploaderData {
    pub fn new() -> ArtifactGroupUploaderData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::project_id::ProjectId>(
            "project_id",
            |m: &ArtifactGroupUploaderData| { &m.project_id },
            |m: &mut ArtifactGroupUploaderData| { &mut m.project_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::run_id::RunId>(
            "run_id",
            |m: &ArtifactGroupUploaderData| { &m.run_id },
            |m: &mut ArtifactGroupUploaderData| { &mut m.run_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::artifact::ArtifactId>(
            "id",
            |m: &ArtifactGroupUploaderData| { &m.id },
            |m: &mut ArtifactGroupUploaderData| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ancestor_group_ids",
            |m: &ArtifactGroupUploaderData| { &m.ancestor_group_ids },
            |m: &mut ArtifactGroupUploaderData| { &mut m.ancestor_group_ids },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ArtifactGroupUploaderData>(
            "ArtifactGroupUploaderData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ArtifactGroupUploaderData {
    const NAME: &'static str = "ArtifactGroupUploaderData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.project_id)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.run_id)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.id)?;
                },
                50 => {
                    self.ancestor_group_ids.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.project_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.run_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.ancestor_group_ids {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.project_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.run_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.ancestor_group_ids {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ArtifactGroupUploaderData {
        ArtifactGroupUploaderData::new()
    }

    fn clear(&mut self) {
        self.project_id.clear();
        self.run_id.clear();
        self.id.clear();
        self.ancestor_group_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ArtifactGroupUploaderData {
        static instance: ArtifactGroupUploaderData = ArtifactGroupUploaderData {
            project_id: ::protobuf::MessageField::none(),
            run_id: ::protobuf::MessageField::none(),
            id: ::protobuf::MessageField::none(),
            ancestor_group_ids: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ArtifactGroupUploaderData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ArtifactGroupUploaderData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ArtifactGroupUploaderData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ArtifactGroupUploaderData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:observation_tools.proto.RunUploaderData)
pub struct RunUploaderData {
    // message fields
    // @@protoc_insertion_point(field:observation_tools.proto.RunUploaderData.project_id)
    pub project_id: ::std::string::String,
    // @@protoc_insertion_point(field:observation_tools.proto.RunUploaderData.run_id)
    pub run_id: ::protobuf::MessageField<super::run_id::RunId>,
    // special fields
    // @@protoc_insertion_point(special_field:observation_tools.proto.RunUploaderData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RunUploaderData {
    fn default() -> &'a RunUploaderData {
        <RunUploaderData as ::protobuf::Message>::default_instance()
    }
}

impl RunUploaderData {
    pub fn new() -> RunUploaderData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "project_id",
            |m: &RunUploaderData| { &m.project_id },
            |m: &mut RunUploaderData| { &mut m.project_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::run_id::RunId>(
            "run_id",
            |m: &RunUploaderData| { &m.run_id },
            |m: &mut RunUploaderData| { &mut m.run_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RunUploaderData>(
            "RunUploaderData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RunUploaderData {
    const NAME: &'static str = "RunUploaderData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.project_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.run_id)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.project_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.project_id);
        }
        if let Some(v) = self.run_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.project_id.is_empty() {
            os.write_string(1, &self.project_id)?;
        }
        if let Some(v) = self.run_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RunUploaderData {
        RunUploaderData::new()
    }

    fn clear(&mut self) {
        self.project_id.clear();
        self.run_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RunUploaderData {
        static instance: RunUploaderData = RunUploaderData {
            project_id: ::std::string::String::new(),
            run_id: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RunUploaderData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RunUploaderData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RunUploaderData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RunUploaderData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bsrc/proto/api_context.proto\x12\x17observation_tools.proto\x1a\x1a\
    src/proto/project_id.proto\x1a\x18src/proto/artifact.proto\x1a\x16src/pr\
    oto/run_id.proto\"\xaf\x02\n\x19ArtifactGroupUploaderData\x12A\n\nprojec\
    t_id\x18\x07\x20\x01(\x0b2\".observation_tools.proto.ProjectIdR\tproject\
    Id\x125\n\x06run_id\x18\x05\x20\x01(\x0b2\x1e.observation_tools.proto.Ru\
    nIdR\x05runId\x123\n\x02id\x18\x03\x20\x01(\x0b2#.observation_tools.prot\
    o.ArtifactIdR\x02id\x12Q\n\x12ancestor_group_ids\x18\x06\x20\x03(\x0b2#.\
    observation_tools.proto.ArtifactIdR\x10ancestorGroupIdsJ\x04\x08\x01\x10\
    \x02J\x04\x08\x02\x10\x03J\x04\x08\x04\x10\x05\"g\n\x0fRunUploaderData\
    \x12\x1d\n\nproject_id\x18\x01\x20\x01(\tR\tprojectId\x125\n\x06run_id\
    \x18\x02\x20\x01(\x0b2\x1e.observation_tools.proto.RunIdR\x05runIdB\x1b\
    \n\x17tools.observation.protoP\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::project_id::file_descriptor().clone());
            deps.push(super::artifact::file_descriptor().clone());
            deps.push(super::run_id::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(ArtifactGroupUploaderData::generated_message_descriptor_data());
            messages.push(RunUploaderData::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
